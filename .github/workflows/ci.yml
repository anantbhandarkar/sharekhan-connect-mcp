name: CI

# This workflow ensures code quality and formatting before any build process
# 1. format-check: Validates Black formatting and import sorting (runs first)
# 2. test: Runs comprehensive tests across Python versions
# 3. build: Creates package artifacts (depends on both format-check and test)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  type-check:
    name: Type Checking with MyPy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-requests types-PyYAML types-psutil types-setuptools pydantic fastapi
    
    - name: Type check with mypy (strict)
      run: |
        echo "🔍 Running strict type checking with mypy..."
        mypy src/ --config-file=pyproject.toml --show-error-codes --pretty
        echo "✅ Type checking completed"

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install radon>=6.0.0 xenon>=0.9.0 pydocstyle>=6.3.0

    - name: Check code complexity with radon
      run: |
        echo "🔍 Analyzing code complexity with radon..."
        radon cc src/ --min B --show-complexity
        echo "✅ Code complexity analysis completed"

    - name: Check maintainability with xenon
      run: |
        echo "🔍 Checking maintainability index with xenon..."
        xenon --max-absolute B --max-modules A --max-average A src/ || echo "⚠️ Some maintainability issues found"
        echo "✅ Maintainability analysis completed"

    - name: Check documentation quality with pydocstyle
      run: |
        echo "🔍 Checking documentation quality with pydocstyle..."
        pydocstyle src/ --count || echo "⚠️ Some documentation issues found"
        echo "✅ Documentation quality check completed"

  security-enhanced:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets>=1.4.0 bandit>=1.7.0 pip-audit>=2.6.0

    - name: Scan for secrets with detect-secrets
      run: |
        echo "🔍 Scanning for secrets and sensitive data..."
        if [ -f .secrets.baseline ]; then
          detect-secrets scan --baseline .secrets.baseline --all-files
        else
          detect-secrets scan --all-files --initial-scan
        fi
        echo "✅ Secrets scanning completed"

    - name: Security scan with bandit
      run: |
        echo "🔍 Running security analysis with bandit..."
        bandit -r src/ || echo "⚠️ Some security issues found"
        echo "✅ Security analysis completed"

  format-check:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort
    
    - name: Check code formatting with Black
      run: |
        echo "🔍 Checking code formatting with Black..."
        black --check --diff src/
        echo "✅ All files properly formatted"
    
    - name: Check import sorting with isort
      run: |
        echo "🔍 Checking import sorting with isort..."
        pip install isort
        isort --check-only --diff src/
        echo "✅ Import sorting is correct"

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov httpx black isort mypy bandit safety flake8
    
    - name: Quick formatting check (fail fast)
      run: |
        echo "🔍 Quick formatting validation..."
        black --check src/
        echo "✅ Code formatting verified"
    
    - name: Lint with flake8
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        echo "✅ Linting completed"
    
    - name: Type check with mypy
      run: |
        echo "🔍 Running type checking with mypy..."
        mypy src/ --ignore-missing-imports
        echo "✅ Type checking completed"
    
    - name: Security scan with bandit
      run: |
        echo "🔍 Running security scan with bandit..."
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
        echo "✅ Security scan completed"
    
    - name: Check for dependency vulnerabilities
      run: |
        echo "🔍 Checking for dependency vulnerabilities..."
        pip install safety
        safety scan --json --output safety-report.json || true
        safety scan
        echo "✅ Dependency security check completed"
    
    - name: Run tests with coverage
      run: |
        echo "🔍 Running tests with coverage..."
        pip install pytest-cov
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing || echo "⚠️ No pytest tests found, running installation test instead"
        python test_installation.py
        echo "✅ Coverage analysis completed"
    
    - name: Test installation
      run: |
        echo "🔍 Running installation tests..."
        python test_installation.py
        echo "✅ Installation tests passed"
    
    - name: Validate GitHub Actions versions
      run: |
        echo "🔍 Checking for deprecated GitHub Actions..."
        python -m pytest tests/test_github_actions_versions.py -v
        echo "✅ GitHub Actions versions validated"
    
    - name: Check commit message for formatting
      run: |
        echo "🔍 Checking commit message..."
        if git log --oneline -1 | grep -i "format\|black\|style"; then
          echo "✅ Commit message indicates formatting changes"
        else
          echo "ℹ️  Consider mentioning formatting in commit messages for better tracking"
        fi
    
    - name: Upload security and coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: security-coverage-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml
          htmlcov/
        if-no-files-found: warn

  build:
    runs-on: ubuntu-latest
    needs: [type-check, code-quality, security-enhanced, format-check, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        echo "✅ Package built successfully"
    
    - name: Check package
      run: |
        echo "🔍 Validating package..."
        twine check dist/*
        echo "✅ Package validation passed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
